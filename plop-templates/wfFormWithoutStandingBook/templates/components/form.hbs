import React from "react";
import { connect } from "@sy/framework";
import {
    FormJsx,
    FormCollapseNavigatebarExtend,
    FormModal
} from "@sy/platform/lib/components";
import {
    DatePicker,
    Input,
    InputNumber,
    message,
    Search,
    Button,
    Alert
} from "@sy/framework/lib/widget";
import { DictSelect } from "@sy/platform/lib/extensions";
import { model, utils } from "@sy/platform/lib/common/utils";
import Comm from "@/project/common";
import { modal } from "@sy/framework/lib/common";
import { GetCustSupplier } from "@/project/extensions/custSupplier";

const {
    FormAttachmentItem,
    FormAuditOpinion,
    FormTableItem,
    CollapsePF
} = FormJsx;
const { Panel } = CollapsePF;
const { TextArea } = Input;
const { RangePicker } = DatePicker;

class Form extends React.PureComponent {
    constructor(props) {
        super(props);
    }
    componentDidMount = () => {
        //this.initForm();
    };

    //初始化表单
    initForm = () => {
        const { dispatch, workflowProps = {} } = this.props;
        const {
            formId,
            wfInstanceId: wfInstanceID,
            wfTemplateId
        } = workflowProps;
        dispatch({
            type: "current/getBillData",
            params: {
                wfInstanceID,
                formId,
                wfTemplateId
            }
        });
    };

    //更改表单的值
    changeFormData = (item = {}) => {
        const {
            formConfig: { data },
            dispatch
        } = this.props;
        let newData = { ...data, ...item };
        model.setFormConfig(dispatch, {
            namespace: "formConfig",
            data: {
                ...newData
            }
        });
    };

    tableInstance = null;

    getTableInstance = tableInstance => {
        this.tableInstance = tableInstance;
    };

    // 字典选择事件
    handleDictChange = (id, name, _e, item, extraDatas = {}) => {
        this.changeFormData({
            [id]: item?.props?.record?.DictItemId || "",
            [name]: item?.props?.record?.DictItemName || "",
            ...extraDatas
        });
    };

    render() {
        const {
            formConfig = {},
            dispatch,
            formScrollContainerId,
            dynamicFormProps: { formEditable },
            workflowProps = {}
        } = this.props;
        const {
            accordion = {},
            activeKey,
            collapseChangeEvent,
            data = {}
        } = formConfig;
        const { isShowComment, taskId } = workflowProps;
        const auditInfo = workflowProps?.auditInfo || {};
        const modelProps = {
            scrollContainerId: formScrollContainerId,
            labelWidth: "0 0 130px",
            namespace: "formConfig",
            isDisabledFormItem: !formEditable,
            isValidateTrigger: true,
            isValidatedToScroll: false
        };
        // 附件属性
        const AttachmentProps = {
            primaryKey: data?.AttachmentPrimaryKey || data?.WFInstanceID,
            isDisabledFormItem: false,
            seedId: taskId
        };
        let formCollaspeWorkflowProps = { isWorkflowStart: false };
        return (
            <div>
                <FormJsx modelProps={modelProps} workflowProps={workflowProps}>
                    <CollapsePF
                        accordion={accordion}
                        activeKey={activeKey}
                        onChange={collapseChangeEvent}
                    >
                        <Panel header="表单基本信息" key="baseInfo">
                            {Comm.formBuild({
                                //2列布局
                                ColumnCount: 2,
                                FormItems: [
                                    
                                ]
                            })}
                        </Panel>
                        <Panel header="明细表信息">
                            <FormTableItem
                                tableProps={{
                                    tableInstance: this
                                        .PaymentPlanDtlTableInstance,
                                    tableKey: "MaterialDtlKey",
                                    tableName: "明细表信息"
                                }}
                            >
                                
                            </FormTableItem>
                        </Panel>
                        <Panel header="附件" isWFAttachment={true}>
                            <FormAttachmentItem
                                showType="grid"
                                uploadAttachmentProps={AttachmentProps}
                            />
                        </Panel>
                        <Panel
                            header="审批意见"
                            isVisible={
                                !utils.isNullOrEmpty(auditInfo) || isShowComment
                            }
                            isWFAuditOpinion={true}
                        >
                            <FormAuditOpinion auditProps={auditInfo} />
                        </Panel>
                    </CollapsePF>
                </FormJsx>
                <FormCollapseNavigatebarExtend
                    //redux的dispatch属性
                    dispatch={dispatch}
                    //表单的formConfig属性
                    formConfig={formConfig}
                    //流程引擎的属性
                    // workflowProps={workflowProps}
                    workflowProps={formCollaspeWorkflowProps}
                />
            </div>
        );
    }
}

export default connect(({ current, formConfig, loading }) => {
    return {
        ...current,
        formConfig,
        loading
    };
})(Form);
